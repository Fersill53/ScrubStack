@page "/cards/add"
@attribute [Authorize]

@using ScrubStack.Data
@using ScrubStack.Data.Models
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext Db
@inject NavigationManager NavigationManager

<Layout>
    <PageTitle>Add Preference Card</PageTitle>

    <h3 class="mb-4">Add Preference Card</h3>

    <Validations @ref="validationsRef">
        <Field>
            <Label>Surgeon Name</Label>
            <TextEdit @bind-Text="card.SurgeonName" />
        </Field>

        <Field>
            <Label>Procedure Name</Label>
            <TextEdit @bind-Text="card.ProcedureName" />
        </Field>

        <Field>
            <Label>Instrument Sets</Label>
            <Select TValue="int"
                    Multiple="true"
                    @bind-SelectedValues="selectedSetIds">
                @foreach (var set in allSets)
                {
                    <SelectItem Value="@set.Id">@set.SetName</SelectItem>
                }
            </Select>
        </Field>

        <Button Color="Color.Success" Clicked="HandleSubmit">Add Card</Button>
    </Validations>
</Layout>

@code {
    private PreferenceCard card = new();
    private List<InstrumentSet> allSets = new();
    private List<int> selectedSetIds = new();
    private Validations validationsRef = default!;

    protected override async Task OnInitializedAsync()
    {
        allSets = await Db.InstrumentSets.ToListAsync();
    }

    private async Task HandleSubmit()
    {
        if (await validationsRef.ValidateAll())
        {
            // Get the full InstrumentSet objects based on selected IDs
            var selectedSets = allSets.Where(s => selectedSetIds.Contains(s.Id)).ToList();

            card.InstrumentSets = selectedSets;
            Db.PreferenceCards.Add(card);
            await Db.SaveChangesAsync();
            NavigationManager.NavigateTo("/cards");
        }
    }
}
