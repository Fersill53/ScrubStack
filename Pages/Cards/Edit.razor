@page "/cards/edit/{id:int}"
@attribute [Authorize]

@using ScrubStack.Data
@using ScrubStack.Data.Models
@using Microsoft.EntityFrameworkCore
@using Blazorise
@inject ApplicationDbContext Db
@inject NavigationManager NavigationManager

<PageTitle>Edit Preference Card</PageTitle>

<Layout>
    <Card>
        <CardHeader>
            <CardTitle>Edit Preference Card</CardTitle>
        </CardHeader>

        <CardBody>
            <Validations @ref="validationsRef">
                <Fields>

                    <Field>
                        <Label>Surgeon Name</Label>
                        <TextEdit @bind-Text="card.SurgeonName" />
                    </Field>

                    <Field>
                        <Label>Procedure Name</Label>
                        <TextEdit @bind-Text="card.ProcedureName" />
                    </Field>

                    <Field>
                        <Label>Instrument Sets</Label>
                        <Select TValue="int" Multiple="true" @bind-SelectedValues="selectedSetIds">
                            @foreach (var set in allSets)
                            {
                                <SelectItem Value="@set.Id">@set.SetName</SelectItem>
                            }
                        </Select>
                    </Field>

                </Fields>

                <div class="mt-3">
                    <Button Color="Color.Primary" Clicked="HandleValidSubmit">Save Changes</Button>
                </div>
            </Validations>
        </CardBody>
    </Card>
</Layout>

@code {
    [Parameter] public int id { get; set; }

    private PreferenceCard card = new();
    private List<InstrumentSet> allSets = new();
    private List<int> selectedSetIds = new();
    private Validations? validationsRef;

    protected override async Task OnInitializedAsync()
    {
        allSets = await Db.InstrumentSets.ToListAsync();
        card = await Db.PreferenceCards
            .Include(c => c.InstrumentSets)
            .FirstOrDefaultAsync(c => c.Id == id) ?? new();

        selectedSetIds = card.InstrumentSets.Select(s => s.Id).ToList();
    }

    private async Task HandleValidSubmit()
    {
        var existingCard = await Db.PreferenceCards
            .Include(c => c.InstrumentSets)
            .FirstOrDefaultAsync(c => c.Id == card.Id);

        if (existingCard is not null)
        {
            existingCard.SurgeonName = card.SurgeonName;
            existingCard.ProcedureName = card.ProcedureName;

            existingCard.InstrumentSets.Clear();

            var selectedSets = await Db.InstrumentSets
                .Where(s => selectedSetIds.Contains(s.Id))
                .ToListAsync();

            foreach (var set in selectedSets)
            {
                existingCard.InstrumentSets.Add(set);
            }

            await Db.SaveChangesAsync();
            NavigationManager.NavigateTo("/cards");
        }
    }
}
