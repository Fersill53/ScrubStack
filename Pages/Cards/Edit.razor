@page "/cards/edit/{id:int}"
@attribute [Authorize]

@using ScrubStack.Data
@using ScrubStack.Data.Models
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext Db
@inject NavigationManager NavigationManager

<PageTitle>Edit Preference Card</PageTitle>

<Layout>
    <Card>
        <CardHeader>
            <CardTitle>Edit Preference Card</CardTitle>
        </CardHeader>

        <CardBody>
            <Validations @ref="validationsRef">
                <Fields>

                    <Field>
                        <Label>Surgeon Name</Label>
                        <TextEdit @bind-Text="card.SurgeonName" />
                    </Field>

                    <Field>
                        <Label>Procedure Name</Label>
                        <TextEdit @bind-Text="card.ProcedureName" />
                    </Field>

                    <Field>
                        <Label>Instrument Sets</Label>
                        <Select TValue="int"
                                Multiple="true"
                                SelectedValues="@selectedSetIds"
                                SelectedValuesChanged="HandleSelectedSetIdsChanged">
                            @foreach (var set in allSets)
                            {
                                <SelectItem Value="@set.Id">@set.SetName</SelectItem>
                            }
                        </Select>
                    </Field>

                </Fields>

                <div class="mt-3">
                    <Button Color="Color.Primary" Clicked="HandleValidSubmit">Save Changes</Button>
                </div>
            </Validations>
        </CardBody>
    </Card>
</Layout>

@code {
    [Parameter] public int id { get; set; }

    private PreferenceCard card = new(); // Eliminates nullable warning
    private List<InstrumentSet> allSets = new();
    private List<int> selectedSetIds = new();
    private Validations? validationsRef;

    protected override async Task OnInitializedAsync()
    {
        var dbCard = await Db.PreferenceCards
            .Include(c => c.InstrumentSets)
            .FirstOrDefaultAsync(c => c.Id == id);

        if (dbCard is null)
        {
            NavigationManager.NavigateTo("/cards");
            return;
        }

        card = dbCard;
        allSets = await Db.InstrumentSets.ToListAsync();
        selectedSetIds = card.InstrumentSets?.Select(s => s.Id).ToList() ?? new List<int>();
    }

    private Task HandleSelectedSetIdsChanged(IEnumerable<int> ids)
    {
        selectedSetIds = ids.ToList();
        return Task.CompletedTask;
    }

    private async Task HandleValidSubmit()
    {
        var selectedSets = await Db.InstrumentSets
            .Where(set => selectedSetIds.Contains(set.Id))
            .ToListAsync();

        card.InstrumentSets = selectedSets;

        await Db.SaveChangesAsync();
        NavigationManager.NavigateTo("/cards");
    }
}
