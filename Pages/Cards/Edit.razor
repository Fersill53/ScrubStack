@page "/cards/edit/{id:int}"
@attribute [Authorize]

@using ScrubStack.Data
@using ScrubStack.Data.Models
@using Microsoft.EntityFrameworkCore
@using Blazorise
@inject ApplicationDbContext Db
@inject NavigationManager NavigationManager

<PageTitle>Edit Preference Card</PageTitle>

<Layout>
    <Card>
        <CardHeader>
            <CardTitle>Edit Preference Card</CardTitle>
        </CardHeader>

        <CardBody>
            @if (card is null)
            {
                <p>Loading...</p>
            }
            else
            {
                <Validations @ref="validationsRef">
                    <Fields>
                        <Field>
                            <Label>Surgeon Name</Label>
                            <TextEdit @bind-Text="card.SurgeonName" />
                        </Field>

                        <Field>
                            <Label>Procedure Name</Label>
                            <TextEdit @bind-Text="card.ProcedureName" />
                        </Field>

                        <Field>
                            <Label>Instrument Sets</Label>
                            <Select TValue="int" Multiple="true" @bind-SelectedValues="selectedSetIds">
                                @foreach (var set in allSets)
                                {
                                    <SelectItem Value="@set.Id">@set.SetName</SelectItem>
                                }
                            </Select>
                        </Field>
                    </Fields>

                    <div class="mt-3">
                        <Button Color="Color.Primary" Clicked="HandleValidSubmit">Save</Button>
                    </div>
                </Validations>
            }
        </CardBody>
    </Card>
</Layout>

@code {
    [Parameter]
    public int id { get; set; }

    private PreferenceCard? card;
    private List<InstrumentSet> allSets = new();
    private List<int> selectedSetIds = new();
    private Validations? validationsRef;

    protected override async Task OnInitializedAsync()
    {
        allSets = await Db.InstrumentSets.ToListAsync();
        card = await Db.PreferenceCards
            .Include(c => c.InstrumentSets)
            .FirstOrDefaultAsync(c => c.Id == id);

        if (card != null && card.InstrumentSets != null)
        {
            selectedSetIds = card.InstrumentSets.Select(s => s.Id).ToList();
        }
    }

    private async Task HandleValidSubmit()
    {
        if (card is null)
            return;

        var selectedSets = await Db.InstrumentSets
            .Where(set => selectedSetIds.Contains(set.Id))
            .ToListAsync();

        card.InstrumentSets = selectedSets;
        Db.PreferenceCards.Update(card);
        await Db.SaveChangesAsync();
        NavigationManager.NavigateTo("/cards");
    }
}
