@page "/cards"
@attribute [Authorize]

@using ScrubStack.Data
@using ScrubStack.Data.Models
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext Db
@inject NavigationManager NavigationManager

<h3>Surgeon Preference Cards</h3>

@if (loading)
{
    <p>Loading preference cards...</p>
}
else if (cards is not null && cards.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Surgeon</th>
                <th>Procedure</th>
                <th>Instrument Sets</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var card in cards)
            {
                <tr>
                    <td>@card.SurgeonName</td>
                    <td>@card.ProcedureName</td>
                    <td>
                        @if (card.InstrumentSets is not null)
                        {
                            @string.Join(", ", card.InstrumentSets.Select(s => s.SetName))
                        }
                    </td>
                    <td>
                        <button class="btn btn-sm btn-primary me-2" @onclick="() => EditCard(card.Id)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteCard(card.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No preference cards found.</p>
}

@code {
    private bool loading = true;
    private List<PreferenceCard> cards = new();

    protected override async Task OnInitializedAsync()
    {
        cards = await Db.PreferenceCards
            .Include(c => c.InstrumentSets)
            .ToListAsync();
        loading = false;
    }

    private void EditCard(int id)
    {
        NavigationManager.NavigateTo($"/cards/edit/{id}");
    }

    private async Task DeleteCard(int id)
    {
        var card = await Db.PreferenceCards
            .Include(c => c.InstrumentSets)
            .FirstOrDefaultAsync(c => c.Id == id);

        if (card is not null)
        {
            card.InstrumentSets?.Clear(); // if using many-to-many
            Db.PreferenceCards.Remove(card);
            await Db.SaveChangesAsync();

            cards.Remove(card);
            StateHasChanged();
        }
    }
}
